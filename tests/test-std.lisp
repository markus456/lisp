(load ./std.lisp)

(print '(testing not))
(not t)
(not nil)

(print '(testing and))
(and t t)
(and t nil)
(and nil t)
(and nil nil)

(print '(testing or))
(or t t)
(or t nil)
(or nil t)
(or nil nil)

(print '(testing xor))
(xor t t)
(xor t nil)
(xor nil t)
(xor nil nil)

(print '(testing mul))
(mul 1 1)
(mul 1 2)
(mul 1 10)
(mul 10 10)
(mul 32 32)
(mul 64 64)
(mul 128 128)
(mul 1024 1024)
(mul 65535 65536)

(print '(testing div))
(div 123456 1)
(div 123456 10)
(div 123456 100)
(div 123456 1000)
(div 123456 10000)
(div 123456 100000)
(div 123456 1000000)

(print '(testing mod))
(mod 123456 1)
(mod 123456 10)
(mod 123456 100)
(mod 123456 1000)
(mod 123456 10000)
(mod 123456 100000)
(mod 123456 1000000)

(print '(testing length))
(length nil)
(length '())
(length '(1))
(length '(1 2))
(length (cons 1 nil))
(length (cons 1 (cons 2 nil)))
(length '(1 2 3 4 5 6 7 8 9 10))

(print '(testing append))
(append '(1 2 3) 1)
(append '(1 2 3) (append '(4 5) 6))
(append '(1 2 3) '(1 2 3))

(print '(testing mapcar))
(defun double (x) (+ x x))
(mapcar double '(1 2 3))

(print '(testing nth))
(nth '(1 2 3 4 5) 0)
(nth '(1 2 3 4 5) 1)
(nth '(1 2 3 4 5) 2)
(nth '(1 2 3 4 5) 3)
(nth '(1 2 3 4 5) 4)
(nth '(1 2 3 4 5) 5)

(print '(testing fill_n))
(fill_n 1 0)
(fill_n 10 0)
(fill_n 100 0)
(fill_n 10 (fill_n 10 0))
(fill_n 10 'hello)
(fill_n 10 (lambda () (1)))

(print '(testing generate_n))
(generate_n 10 (lambda () 1))
(generate_n 10 (lambda () (rand)))

(print '(testing write-list))
(defvar \n 10)
(defvar \s 32)
(write-list '(\n \n 'hello \s 'world \s '! \n \n))

(print '(testing write-number))
(write-number 1)
(write-number 12)
(write-number 123)
(write-number 1234)
(write-number 12345)
(write-number 123456)
(write-number 1234567)
(write-number 12345678)
(write-number 123456789)
